#ifndef __INS__
#define __INS__

#ifdef __cplusplus
extern "C"
{
#endif

	/**
	 * All the instructions that can directly given to cpu
	 */
	typedef enum ins
	{
		nop,
		ld_bc_imm,
		ld_a_to_loc_bc,
		inc_bc,
		inc_b,
		dec_b,
		ld_b_imm,
		rlca,
		ld_imm_sp,
		add_hl_bc,
		ld_a_from_loc_bc,
		dec_bc,
		inc_c,
		dec_c,
		ld_c_imm,
		rrca,

		stop,
		ld_de_imm,
		ld_a_to_loc_de,
		inc_de,
		inc_d,
		dec_d,
		ld_d_imm,
		rla,
		jr,
		add_hl_de,
		ld_a_from_loc_de,
		dec_de,
		inc_e,
		dec_e,
		ld_e_imm,
		rra,

		jrc_nz,
		ld_hl_imm,
		ld_a_to_loc_hli,
		inc_hl,
		inc_h,
		dec_h,
		ld_h_imm,
		daa,
		jrc_z,
		add_hl_hl,
		ld_a_from_loc_hli,
		dec_hl,
		inc_l,
		dec_l,
		ld_l_imm,
		cpl,

		jrc_nc,
		ld_sp_imm,
		ld_a_to_loc_hld,
		inc_sp,
		inc_hl_r8,
		dec_hl_r8,
		ld_hl_r8_imm,
		scf,
		jrc_c,
		add_hl_sp,
		ld_a_from_loc_hld,
		dec_sp,
		inc_a,
		dec_a,
		ld_a_imm,
		ccf,

		ld_b_b,
		ld_b_c,
		ld_b_d,
		ld_b_e,
		ld_b_h,
		ld_b_l,
		ld_b_hl_r8,
		ld_b_a,
		ld_c_b,
		ld_c_c,
		ld_c_d,
		ld_c_e,
		ld_c_h,
		ld_c_l,
		ld_c_hl_r8,
		ld_c_a,

		ld_d_b,
		ld_d_c,
		ld_d_d,
		ld_d_e,
		ld_d_h,
		ld_d_l,
		ld_d_hl_r8,
		ld_d_a,
		ld_e_b,
		ld_e_c,
		ld_e_d,
		ld_e_e,
		ld_e_h,
		ld_e_l,
		ld_e_hl_r8,
		ld_e_a,

		ld_h_b,
		ld_h_c,
		ld_h_d,
		ld_h_e,
		ld_h_h,
		ld_h_l,
		ld_h_hl_r8,
		ld_h_a,
		ld_l_b,
		ld_l_c,
		ld_l_d,
		ld_l_e,
		ld_l_h,
		ld_l_l,
		ld_l_hl_r8,
		ld_l_a,

		ld_hl_r8_b,
		ld_hl_r8_c,
		ld_hl_r8_d,
		ld_hl_r8_e,
		ld_hl_r8_h,
		ld_hl_r8_l,
		ld_hl_r8_hl_r8,
		ld_hl_r8_a,
		ld_a_b,
		ld_a_c,
		ld_a_d,
		ld_a_e,
		ld_a_h,
		ld_a_l,
		ld_a_hl_r8,
		ld_a_a,

		add_a_b,
		add_a_c,
		add_a_d,
		add_a_e,
		add_a_h,
		add_a_l,
		add_a_hl_r8,
		add_a_a,
		adc_a_b,
		adc_a_c,
		adc_a_d,
		adc_a_e,
		adc_a_h,
		adc_a_l,
		adc_a_hl_r8,
		adc_a_a,

		sub_a_b,
		sub_a_c,
		sub_a_d,
		sub_a_e,
		sub_a_h,
		sub_a_l,
		sub_a_hl_r8,
		sub_a_a,
		sbc_a_b,
		sbc_a_c,
		sbc_a_d,
		sbc_a_e,
		sbc_a_h,
		sbc_a_l,
		sbc_a_hl_r8,
		sbc_a_a,

		and_a_b,
		and_a_c,
		and_a_d,
		and_a_e,
		and_a_h,
		and_a_l,
		and_a_hl_r8,
		and_a_a,
		xor_a_b,
		xor_a_c,
		xor_a_d,
		xor_a_e,
		xor_a_h,
		xor_a_l,
		xor_a_hl_r8,
		xor_a_a,

		or_a_b,
		or_a_c,
		or_a_d,
		or_a_e,
		or_a_h,
		or_a_l,
		or_a_hl_r8,
		or_a_a,
		cp_a_b,
		cp_a_c,
		cp_a_d,
		cp_a_e,
		cp_a_h,
		cp_a_l,
		cp_a_hl_r8,
		cp_a_a,

		retc_nz,
		pop_bc,
		jpc_nz,
		jp,
		call_nz_imm,
		psh_bc,
		add_a_imm,
		rst_tgt3_0,
		retc_z,
		return_from_jumps,
		jpc_z,
		prefix,
		call_z_imm,
		call_imm,
		adc_a_imm,
		rst_tgt3_1,

		retc_nc,
		pop_de,
		jpc_nc,
		ud0,
		call_nc_imm,
		psh_de,
		sub_a_imm,
		rst_tgt3_2,
		retc_c,
		reti,
		jpc_c,
		ud1,
		call_c_imm,
		ud2,
		sbc_a_imm,
		rst_tgt3_3,

		ldh_imm_loc_a,
		pop_hl,
		ldh_c_a,
		ud3,
		ud4,
		psh_hl,
		and_a_imm,
		rst_tgt3_4,
		add_sp_imm8,
		jp_hl,
		ld_imm_loc_a,
		ud5,
		ud6,
		ud7,
		xor_a_imm,
		rst_tgt3_5,

		ldh_a_imm_loc,
		pop_af,
		ldh_a_c,
		di,
		ud8,
		psh_af,
		or_a_imm,
		rst_tgt3_6,
		ld_hl_sp_with_imm8,
		ld_sp_hl,
		ld_a_imm_loc,
		ei,
		ud9,
		ud10,
		cp_a_imm,
		rst_tgt3_7,

		hlt = ld_hl_r8_hl_r8
	} ins;

	/**
	 * All the instructions based on the CB prefix
	 */
	typedef enum ins_cb
	{
		cb_rlc_b,
		cb_rlc_c,
		cb_rlc_d,
		cb_rlc_e,
		cb_rlc_h,
		cb_rlc_l,
		cb_rlc_hl_r8,
		cb_rlc_a,
		cb_rrc_b,
		cb_rrc_c,
		cb_rrc_d,
		cb_rrc_e,
		cb_rrc_h,
		cb_rrc_l,
		cb_rrc_hl_r8,
		cb_rrc_a,
		cb_rl_b,
		cb_rl_c,
		cb_rl_d,
		cb_rl_e,
		cb_rl_h,
		cb_rl_l,
		cb_rl_hl_r8,
		cb_rl_a,
		cb_rr_b,
		cb_rr_c,
		cb_rr_d,
		cb_rr_e,
		cb_rr_h,
		cb_rr_l,
		cb_rr_hl_r8,
		cb_rr_a,
		cb_sla_b,
		cb_sla_c,
		cb_sla_d,
		cb_sla_e,
		cb_sla_h,
		cb_sla_l,
		cb_sla_hl_r8,
		cb_sla_a,
		cb_sra_b,
		cb_sra_c,
		cb_sra_d,
		cb_sra_e,
		cb_sra_h,
		cb_sra_l,
		cb_sra_hl_r8,
		cb_sra_a,
		cb_swap_b,
		cb_swap_c,
		cb_swap_d,
		cb_swap_e,
		cb_swap_h,
		cb_swap_l,
		cb_swap_hl_r8,
		cb_swap_a,
		cb_srl_b,
		cb_srl_c,
		cb_srl_d,
		cb_srl_e,
		cb_srl_h,
		cb_srl_l,
		cb_srl_hl_r8,
		cb_srl_a,
		cb_bit_b0,
		cb_bit_b1,
		cb_bit_b2,
		cb_bit_b3,
		cb_bit_b4,
		cb_bit_b5,
		cb_bit_b6,
		cb_bit_b7,
		cb_bit_c0,
		cb_bit_c1,
		cb_bit_c2,
		cb_bit_c3,
		cb_bit_c4,
		cb_bit_c5,
		cb_bit_c6,
		cb_bit_c7,
		cb_bit_d0,
		cb_bit_d1,
		cb_bit_d2,
		cb_bit_d3,
		cb_bit_d4,
		cb_bit_d5,
		cb_bit_d6,
		cb_bit_d7,
		cb_bit_e0,
		cb_bit_e1,
		cb_bit_e2,
		cb_bit_e3,
		cb_bit_e4,
		cb_bit_e5,
		cb_bit_e6,
		cb_bit_e7,
		cb_bit_h0,
		cb_bit_h1,
		cb_bit_h2,
		cb_bit_h3,
		cb_bit_h4,
		cb_bit_h5,
		cb_bit_h6,
		cb_bit_h7,
		cb_bit_l0,
		cb_bit_l1,
		cb_bit_l2,
		cb_bit_l3,
		cb_bit_l4,
		cb_bit_l5,
		cb_bit_l6,
		cb_bit_l7,
		cb_bit_hl_reg8_0,
		cb_bit_hl_reg8_1,
		cb_bit_hl_reg8_2,
		cb_bit_hl_reg8_3,
		cb_bit_hl_reg8_4,
		cb_bit_hl_reg8_5,
		cb_bit_hl_reg8_6,
		cb_bit_hl_reg8_7,
		cb_bit_a0,
		cb_bit_a1,
		cb_bit_a2,
		cb_bit_a3,
		cb_bit_a4,
		cb_bit_a5,
		cb_bit_a6,
		cb_bit_a7,
		cb_res_b0,
		cb_res_b1,
		cb_res_b2,
		cb_res_b3,
		cb_res_b4,
		cb_res_b5,
		cb_res_b6,
		cb_res_b7,
		cb_res_c0,
		cb_res_c1,
		cb_res_c2,
		cb_res_c3,
		cb_res_c4,
		cb_res_c5,
		cb_res_c6,
		cb_res_c7,
		cb_res_d0,
		cb_res_d1,
		cb_res_d2,
		cb_res_d3,
		cb_res_d4,
		cb_res_d5,
		cb_res_d6,
		cb_res_d7,
		cb_res_e0,
		cb_res_e1,
		cb_res_e2,
		cb_res_e3,
		cb_res_e4,
		cb_res_e5,
		cb_res_e6,
		cb_res_e7,
		cb_res_h0,
		cb_res_h1,
		cb_res_h2,
		cb_res_h3,
		cb_res_h4,
		cb_res_h5,
		cb_res_h6,
		cb_res_h7,
		cb_res_l0,
		cb_res_l1,
		cb_res_l2,
		cb_res_l3,
		cb_res_l4,
		cb_res_l5,
		cb_res_l6,
		cb_res_l7,
		cb_res_hl_reg8_0,
		cb_res_hl_reg8_1,
		cb_res_hl_reg8_2,
		cb_res_hl_reg8_3,
		cb_res_hl_reg8_4,
		cb_res_hl_reg8_5,
		cb_res_hl_reg8_6,
		cb_res_hl_reg8_7,
		cb_res_a0,
		cb_res_a1,
		cb_res_a2,
		cb_res_a3,
		cb_res_a4,
		cb_res_a5,
		cb_res_a6,
		cb_res_a7,
		cb_set_b0,
		cb_set_b1,
		cb_set_b2,
		cb_set_b3,
		cb_set_b4,
		cb_set_b5,
		cb_set_b6,
		cb_set_b7,
		cb_set_c0,
		cb_set_c1,
		cb_set_c2,
		cb_set_c3,
		cb_set_c4,
		cb_set_c5,
		cb_set_c6,
		cb_set_c7,
		cb_set_d0,
		cb_set_d1,
		cb_set_d2,
		cb_set_d3,
		cb_set_d4,
		cb_set_d5,
		cb_set_d6,
		cb_set_d7,
		cb_set_e0,
		cb_set_e1,
		cb_set_e2,
		cb_set_e3,
		cb_set_e4,
		cb_set_e5,
		cb_set_e6,
		cb_set_e7,
		cb_set_h0,
		cb_set_h1,
		cb_set_h2,
		cb_set_h3,
		cb_set_h4,
		cb_set_h5,
		cb_set_h6,
		cb_set_h7,
		cb_set_l0,
		cb_set_l1,
		cb_set_l2,
		cb_set_l3,
		cb_set_l4,
		cb_set_l5,
		cb_set_l6,
		cb_set_l7,
		cb_set_hl_reg8_0,
		cb_set_hl_reg8_1,
		cb_set_hl_reg8_2,
		cb_set_hl_reg8_3,
		cb_set_hl_reg8_4,
		cb_set_hl_reg8_5,
		cb_set_hl_reg8_6,
		cb_set_hl_reg8_7,
		cb_set_a0,
		cb_set_a1,
		cb_set_a2,
		cb_set_a3,
		cb_set_a4,
		cb_set_a5,
		cb_set_a6,
		cb_set_a7
	} ins_cb;
#ifdef __cplusplus
}
#endif

#endif // __INS__